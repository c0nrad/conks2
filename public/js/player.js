// Generated by CoffeeScript 1.7.1
(function() {
  var COLORS, MAX_BULLETS, PLAYER_MOVE_SPEED, Player;

  PLAYER_MOVE_SPEED = 2;

  COLORS = [0xFF0000, 0xFF7F00, 0xFFFF00, 0x00FF00, 0x0000FF, 0x4B0082, 0x8F00FF];

  MAX_BULLETS = 30;

  Player = (function() {
    function Player(X, Y, scene) {
      this.X = X;
      this.Y = Y;
      this.scene = scene;
      console.log("Player created at " + this.X + ", " + Y);
      this.geometry = new THREE.CubeGeometry(10, 10, 10);
      this.material = new THREE.MeshBasicMaterial({
        color: 0x00FF00
      });
      this.cube = new THREE.Mesh(this.geometry, this.material);
      this.cube.position.z = 5;
      this.scene.add(this.cube);
      this.bullets = [];
      this.colorIndex = 0;
      this.alive = true;
    }

    Player.prototype.generateColor = function() {
      var blue, frequency, green, i, red;
      frequency = .3;
      i = this.colorIndex;
      this.colorIndex = (this.colorIndex + 1) % 32;
      red = Math.floor(Math.sin(frequency * i + 0) * 127 + 128);
      green = Math.floor(Math.sin(frequency * i + 2) * 127 + 128);
      blue = Math.floor(Math.sin(frequency * i + 4) * 127 + 128);
      return "rgb(" + red + "," + green + "," + blue + ")";
    };

    Player.prototype.update = function(eventState) {
      var b, bad, badBullets, _i, _j, _len, _len1, _ref, _results;
      if (eventState.RIGHT) {
        this.cube.rotation.z -= .1;
      }
      if (eventState.LEFT) {
        this.cube.rotation.z += .1;
      }
      if (eventState.UP) {
        this.cube.position.x -= (Math.sin(-1 * this.cube.rotation.z)) * 4;
        this.cube.position.y -= (Math.cos(-1 * this.cube.rotation.z)) * 4;
      }
      if (eventState.DOWN) {
        this.cube.position.x += (Math.sin(-1 * this.cube.rotation.z)) * 4;
        this.cube.position.y += (Math.cos(-1 * this.cube.rotation.z)) * 4;
      }
      if (eventState.STRAFE_LEFT) {
        this.cube.position.x -= (Math.sin(-1 * this.cube.rotation.z - Math.PI / 2)) * 4;
        this.cube.position.y -= (Math.cos(-1 * this.cube.rotation.z - Math.PI / 2)) * 4;
      }
      if (eventState.STRAFE_RIGHT) {
        this.cube.position.x -= (Math.sin(-1 * this.cube.rotation.z + Math.PI / 2)) * 4;
        this.cube.position.y -= (Math.cos(-1 * this.cube.rotation.z + Math.PI / 2)) * 4;
      }
      if (eventState.SPACEBAR) {
        if (this.bullets.length <= MAX_BULLETS) {
          b = new Bullet(this.cube.position.x, this.cube.position.y, this.cube.rotation.z, this.scene, this.generateColor());
          this.bullets.push(b);
        }
      }
      badBullets = this.bullets.filter(function(b) {
        return !b.boundsCheck();
      });
      for (_i = 0, _len = badBullets.length; _i < _len; _i++) {
        bad = badBullets[_i];
        bad.remove();
      }
      this.bullets = this.bullets.filter(function(b) {
        return b.boundsCheck();
      });
      _ref = this.bullets;
      _results = [];
      for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
        b = _ref[_j];
        _results.push(b.move());
      }
      return _results;
    };

    Player.prototype.remove = function() {
      return this.scene.remove(this.cube);
    };

    return Player;

  })();

  window.Player = Player;

}).call(this);
